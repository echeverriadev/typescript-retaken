typescript es un superset de js

===================================
Tipos de datos:
*number     => numericos
*string     => textos
*boolean    => booleanos (true, false)
*object     => objetos {}
*interface  => interfaces, trabaja como un modelo de objeto
*any        => any, hace que una variable sea de tipo de dinamico, es decir, que la variable puede tomar cualquier valor
*array      => arreglos (push, splice,find)
*enum       => enum, trabaja en forma de etiquetas (como clasificador), es realmente un objeto

===================================
Condicionales:
if:   
    if( condici贸n ){ 
        si la condicion es true, aplica estas sentencias 
    }else{
        si la condicion es falsa, aplica esto otro
    }

if anidado:
    if(condicion){
        sentencias
    }else if(condicion){
        sentencias 2
        }else{
            sentencias 3
            }

switch:
    switch(expression){
        case 'x': {
            sentencias;
            break;
        };
        case 'y':{ 
            sentencias;
            break;
        }
        default:{
            sentencias
        }
    }

ternario:
    (condicion)? (sentencias true):(sentencias false)

===================================
Ciclos: estructuras que repiten segun una condici贸n cierto bloque de c贸digo
for:
    for(var cantidad_a_repetir=0; cantidad_a_repetir <= 5; cantidad_a_repetir++){ sentencias }

for of:
    for(let item of items){sentencias}

for in:
    for(let index in array){ sentencias }

===================================
Funciones: Metodos que cumplen ciertas actividades dentro del producto de software
simples:
    function nombreFuncion(){ setencias (voids) }

con parametros:
    function nombreFuncion(parametro:tipo_de_dato){ setencias que usen el parametro (voids) }

con retorno:
    function nombreFuncion(parametro:tipo_de_dato): tipo_de_dato_retornado{ setencias con return }


===================================
Clases: las clases son modelos de informaci贸n, en ella se ven presente atributos, metodos o funciones y se define su visualizacion(public, private)
estas clases tienen un metodo especial llamado constructor, el constructor es quien crea una instancia de una clase y define que cosa se va a ejecutar en el momento de crear un objeto de esa clase    